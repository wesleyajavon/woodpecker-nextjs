// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Beat {
  id          String   @id @default(cuid())
  title       String
  description String?
  genre       String
  bpm         Int
  key         String
  duration    String // Format: "3:24"
  // Prix par type de licence
  wavLeasePrice      Decimal  @db.Decimal(10, 2) @default(19.99)
  trackoutLeasePrice Decimal  @db.Decimal(10, 2) @default(39.99)
  unlimitedLeasePrice Decimal @db.Decimal(10, 2) @default(79.99)
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  tags        String[] // Array of tags like ["Dark", "Hard", "Underground"]
  
  // Stripe integration
  stripePriceId String? // Stripe price ID for checkout (deprecated)
  
  // Stripe Price IDs for each license type
  stripeWavPriceId      String?
  stripeTrackoutPriceId String?
  stripeUnlimitedPriceId String?
  
  // Audio files
  previewUrl  String?  // URL for preview (30 seconds)
  fullUrl     String?  // URL for full beat (after purchase)
  stemsUrl    String?  // URL for stems ZIP file (after purchase)
  
  // Artwork
  artworkUrl  String?  // URL for beat artwork/cover image
  
  // Metadata
  isExclusive Boolean  @default(false)
  isActive    Boolean  @default(true)
  featured    Boolean  @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orders      Order[]
  orderItems  OrderItem[]
  userId      String?  // Optional user relation
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Indexes for better performance
  @@index([genre])
  @@index([bpm])
  @@index([key])
  @@index([rating])
  @@index([isActive])
  @@index([featured])
  @@index([userId])
}

model Order {
  id          String   @id @default(cuid())
  
  // Customer information
  customerEmail String
  customerName  String?
  customerPhone String?
  
  // Order details
  totalAmount   Decimal  @db.Decimal(10, 2)
  currency      String   @default("EUR")
  status        OrderStatus @default(PENDING)
  
  // Payment information
  paymentMethod String?
  paymentId     String?  // External payment provider ID
  paidAt        DateTime?
  
  // License information
  licenseType   LicenseType
  usageRights  String[]    // Array of usage rights
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  beatId       String
  beat         Beat     @relation(fields: [beatId], references: [id], onDelete: Cascade)
  userId       String?  // Optional user relation
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Indexes
  @@index([customerEmail])
  @@index([status])
  @@index([createdAt])
  @@index([beatId])
  @@index([userId])
}

model MultiItemOrder {
  id          String   @id @default(cuid())
  
  // Customer information
  customerEmail String
  customerName  String?
  customerPhone String?
  
  // Order details
  totalAmount   Decimal  @db.Decimal(10, 2)
  currency      String   @default("EUR")
  status        OrderStatus @default(PENDING)
  
  // Payment information
  paymentMethod String?
  paymentId     String?  // External payment provider ID
  paidAt        DateTime?
  sessionId     String?  // Stripe session ID for multi-item orders
  
  // License information
  licenseType   LicenseType
  usageRights  String[]    // Array of usage rights
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  items        OrderItem[]
  userId       String?  // Optional user relation
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Indexes
  @@index([customerEmail])
  @@index([status])
  @@index([createdAt])
  @@index([sessionId])
  @@index([userId])
}

model OrderItem {
  id          String   @id @default(cuid())
  
  // Item details
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orderId     String
  order       MultiItemOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  beatId      String
  beat        Beat     @relation(fields: [beatId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([orderId])
  @@index([beatId])
}

enum OrderStatus {
  PENDING
  PAID
  COMPLETED
  CANCELLED
  FAILED
  REFUNDED
  DISPUTED
}

enum LicenseType {
  WAV_LEASE
  TRACKOUT_LEASE
  UNLIMITED_LEASE
  EXCLUSIVE
  CUSTOM
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  multiItemOrders MultiItemOrder[]
  beats    Beat[]
  
  // Content management relations
  faqs         FAQItem[]        @relation("FAQEditor")
  licenseInfos LicenseInfo[]     @relation("LicenseEditor")
  privacySections PrivacySection[] @relation("PrivacyEditor")
  termsSections TermsSection[]     @relation("TermsEditor")
}

enum UserRole {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// FAQ Categories (predefined categories like licenses, payment, etc.)
model FAQCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  displayName String   // For translations: "Licenses", "Payment", etc.
  icon        String?  // Lucide icon name
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  faqs        FAQItem[]
  
  @@index([slug])
  @@index([sortOrder])
}

// FAQ Items
model FAQItem {
  id          String       @id @default(cuid())
  question    String
  answer      String
  shortAnswer String?      // Optional shorter version
  
  // Content management
  isActive    Boolean      @default(true)
  sortOrder   Int          @default(0)
  featured    Boolean      @default(false)
  
  // SEO and accessibility
  slug       String?       @unique
  metaKeywords String[]    @default([])
  
  // Timestamps
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  categoryId  String
  category    FAQCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId      String?      // Who created/modified last
  user        User?        @relation("FAQEditor", fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([categoryId])
  @@index([featured])
  @@index([isActive])
  @@index([sortOrder])
}

// License Types (WAV, Trackout, Unlimited)
model LicenseInfo {
  id            String   @id @default(cuid())
  name          String   @unique
  slug          String   @unique
  displayName   String   // "WAV Lease", "Trackout Lease", etc.
  description   String
  
  // Pricing
  basePrice     Decimal  @db.Decimal(10, 2)

  // Features and limitations
  features      String[] // JSON array of features
  limitations   String[] // JSON array of limitations
  useCases      String[] // JSON array of use cases
  
  // Usage limits (when applicable)
  maxCopies     Int?     // null = unlimited
  maxStreams    Int?     // null = unlimited
  maxVideos     Int?     // null = unlimited
  allowsLiveProfit Boolean @default(false)
  allowsRadioTV  Boolean @default(false)
  allowsSync     Boolean @default(false)
  
  // File types included
  includesWav   Boolean  @default(true)
  includesMp3   Boolean  @default(true)
  includesStems Boolean @default(false)
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  isActive      Boolean @default(true)
  userId        String?  // Who created/modified last
  user          User?    @relation("LicenseEditor", fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([slug])
  @@index([isActive])
}

// License Features (specific feature comparisons across license types)
model LicenseFeature {
  id            String   @id @default(cuid())
  name          String   // "Commercial Use", "Streaming", etc.
  slug          String   @unique
  
  // Feature details
  description   String?
  icon         String?  // Lucide icon
  category     String?  // "usage", "limits", "files", etc.
  
  // License type values
  wavValue     String   // "Yes"/"No"/"Limited: 5,000"
  trackoutValue String
  unlimitedValue String
  
  // Display settings
  isActive     Boolean  @default(true)
  sortOrder    Int      @default(0)
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([slug])
  @@index([category])
  @@index([sortOrder])
}

// Privacy Policy Sections
model PrivacySection {
  id            String       @id @default(cuid())
  title         String
  slug          String       @unique
  
  // Content
  content       String       // Markdown or HTML content
  icon          String?      // Lucide icon name
  
  // Structure
  orderIndex    Int          @default(0)
  isActive      Boolean      @default(true)
  
  // SEO
  metaTitle    String?
  metaDescription String?
  
  // Timestamps
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  userId        String?      // Who created/modified last
  user          User?        @relation("PrivacyEditor", fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([slug])
  @@index([orderIndex])
}

// Terms of Service Sections
model TermsSection {
  id            String       @id @default(cuid())
  title         String
  slug          String       @unique
  
  // Content
  content       String       // Markdown or HTML content
  icon          String?      // Lucide icon name
  
  // Structure
  orderIndex    Int          @default(0)
  isActive      Boolean      @default(true)
  
  // SEO
  metaTitle    String?
  metaDescription String?
  
  // Legal
  version       String       @default("1.0")
  effectiveFrom DateTime     @default(now())
  
  // Timestamps
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  userId        String?      // Who created/modified last
  user          User?        @relation("TermsEditor", fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([slug])
  @@index([orderIndex])
  @@index([version])
}
