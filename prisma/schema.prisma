// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Beat {
  id          String   @id @default(cuid())
  title       String
  description String?
  genre       String
  bpm         Int
  key         String
  duration    String // Format: "3:24"
  price       Decimal  @db.Decimal(10, 2)
  rating      Float    @default(0)
  reviewCount Int      @default(0)
  tags        String[] // Array of tags like ["Dark", "Hard", "Underground"]
  
  // Stripe integration
  stripePriceId String? // Stripe price ID for checkout
  
  // Audio files
  previewUrl  String?  // URL for preview (30 seconds)
  fullUrl     String?  // URL for full beat (after purchase)
  stemsUrl    String?  // URL for stems ZIP file (after purchase)
  
  // Artwork
  artworkUrl  String?  // URL for beat artwork/cover image
  
  // Metadata
  isExclusive Boolean  @default(false)
  isActive    Boolean  @default(true)
  featured    Boolean  @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orders      Order[]
  orderItems  OrderItem[]
  userId      String?  // Optional user relation
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Indexes for better performance
  @@index([genre])
  @@index([bpm])
  @@index([key])
  @@index([price])
  @@index([rating])
  @@index([isActive])
  @@index([featured])
  @@index([userId])
}

model Order {
  id          String   @id @default(cuid())
  
  // Customer information
  customerEmail String
  customerName  String?
  customerPhone String?
  
  // Order details
  totalAmount   Decimal  @db.Decimal(10, 2)
  currency      String   @default("EUR")
  status        OrderStatus @default(PENDING)
  
  // Payment information
  paymentMethod String?
  paymentId     String?  // External payment provider ID
  paidAt        DateTime?
  
  // License information
  licenseType   LicenseType @default(NON_EXCLUSIVE)
  usageRights  String[]    // Array of usage rights
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  beatId       String
  beat         Beat     @relation(fields: [beatId], references: [id], onDelete: Cascade)
  userId       String?  // Optional user relation
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Indexes
  @@index([customerEmail])
  @@index([status])
  @@index([createdAt])
  @@index([beatId])
  @@index([userId])
}

model MultiItemOrder {
  id          String   @id @default(cuid())
  
  // Customer information
  customerEmail String
  customerName  String?
  customerPhone String?
  
  // Order details
  totalAmount   Decimal  @db.Decimal(10, 2)
  currency      String   @default("EUR")
  status        OrderStatus @default(PENDING)
  
  // Payment information
  paymentMethod String?
  paymentId     String?  // External payment provider ID
  paidAt        DateTime?
  sessionId     String?  // Stripe session ID for multi-item orders
  
  // License information
  licenseType   LicenseType @default(NON_EXCLUSIVE)
  usageRights  String[]    // Array of usage rights
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  items        OrderItem[]
  userId       String?  // Optional user relation
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Indexes
  @@index([customerEmail])
  @@index([status])
  @@index([createdAt])
  @@index([sessionId])
  @@index([userId])
}

model OrderItem {
  id          String   @id @default(cuid())
  
  // Item details
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orderId     String
  order       MultiItemOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  beatId      String
  beat        Beat     @relation(fields: [beatId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([orderId])
  @@index([beatId])
}

enum OrderStatus {
  PENDING
  PAID
  COMPLETED
  CANCELLED
  REFUNDED
}

enum LicenseType {
  NON_EXCLUSIVE
  EXCLUSIVE
  CUSTOM
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  multiItemOrders MultiItemOrder[]
  beats    Beat[]
}

enum UserRole {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
