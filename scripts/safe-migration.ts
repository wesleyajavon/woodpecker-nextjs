import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function safeMigration() {
  try {
    console.log('üîß Starting safe database migration...')
    
    // 1. V√©rifier l'√©tat actuel de la base de donn√©es
    console.log('üìä Checking current database state...')
    
    const beats = await prisma.beat.findMany({
      select: {
        id: true,
        title: true,
        wavLeasePrice: true
      },
      take: 5
    })
    
    console.log(`Found ${beats.length} beats in database`)
    
    // 2. Ajouter les nouveaux champs pour les priceId Stripe (sans casser l'existant)
    console.log('üìù Adding Stripe price ID columns...')
    
    try {
      await prisma.$executeRaw`
        ALTER TABLE "Beat" 
        ADD COLUMN IF NOT EXISTS "stripeWavPriceId" TEXT
      `
      console.log('‚úÖ Added stripeWavPriceId column')
    } catch (error) {
      console.log('‚ÑπÔ∏è stripeWavPriceId column might already exist')
    }
    
    try {
      await prisma.$executeRaw`
        ALTER TABLE "Beat" 
        ADD COLUMN IF NOT EXISTS "stripeTrackoutPriceId" TEXT
      `
      console.log('‚úÖ Added stripeTrackoutPriceId column')
    } catch (error) {
      console.log('‚ÑπÔ∏è stripeTrackoutPriceId column might already exist')
    }
    
    try {
      await prisma.$executeRaw`
        ALTER TABLE "Beat" 
        ADD COLUMN IF NOT EXISTS "stripeUnlimitedPriceId" TEXT
      `
      console.log('‚úÖ Added stripeUnlimitedPriceId column')
    } catch (error) {
      console.log('‚ÑπÔ∏è stripeUnlimitedPriceId column might already exist')
    }
    
    // 3. V√©rifier que les colonnes ont √©t√© ajout√©es
    const beatSample = await prisma.beat.findFirst({
      select: {
        id: true,
        title: true,
        stripeWavPriceId: true,
        stripeTrackoutPriceId: true,
        stripeUnlimitedPriceId: true
      }
    })
    
    if (beatSample) {
      console.log('‚úÖ New columns are accessible:', {
        stripeWavPriceId: beatSample.stripeWavPriceId,
        stripeTrackoutPriceId: beatSample.stripeTrackoutPriceId,
        stripeUnlimitedPriceId: beatSample.stripeUnlimitedPriceId
      })
    }
    
    console.log('üéâ Safe migration completed successfully!')
    console.log('üìù Next steps:')
    console.log('   1. Test uploading a new beat to create Stripe products')
    console.log('   2. Run the migration script for existing beats')
    console.log('   3. Verify the system works end-to-end')
    
  } catch (error) {
    console.error('‚ùå Error during safe migration:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter la migration s√ªre
safeMigration()
